应用程序通用开发框架(Qu's Framework) V4.0

SSVSDBI Framework

本框架是对开发工作的抽象，适用于所有开发工作。

框架的架构：

一、分块模式
一般地，把一个工作，分为2块。
一块为通用组件，一块为专用组件。
这个分块模式，小到一个类，大到一个系统，都可以应用。
比如：
类：
把通用的功能，做成函数，写入xxxBase类中，然后写个xxx类，继承这个base类，在xxx类中，实现具体的业务逻辑，通过调用base类里的方法，拼凑出具体的业务逻辑。
库：
把通用的功能，做成一个类库，组件，打包发行。而具体的应用，再写个工程，来调用类库，通过对类库的调用，来实现具体的业务逻辑。
系统：
把基础的功能，做成一个服务，然后再把一个应用做成一个服务，应用去调用服务，拼凑出具体的业务逻辑，完成功能。

二、分层模式
根据具体的功能，把应用分层，以便更加清晰的理解业务逻辑的调用关系。
4.0版本，把一个应用大致分为4个部件，其中三层为view，serve，store，另外一层是skeletal。
view层：
负责用户界面的处理，是主要和用户交流的，以及接受数据，呈现数据的。
serve层：
负责具体的业务逻辑的实现。不与用户直接接触，也不与输入输出直接接触。
store层：
负责数据的输入和输出。

以上三层，应该遵守严格的分层规则，且绝对避免相互之间的调用耦合。所传递使用的数据，也应该是通用的数据类型，而不是本层内专用的数据格式。当然，这样做会增加数据转换的成本。具体可以取舍。

skeletal层：
这个层独立于上面三层之外，它是上面三层的整合层，也是具体业务逻辑实现的地方。
通常，一个类，或者一个方法，对应于一个业务需求，只需要调用它，就可以完成一个业务，它是系统的总入口，也是类库必须暴露的一层。通常上面三层，不应该直接暴露给用户使用。
skeletal层也是程序真正的入口，通常程序启动，最先调用的就是skeletal层。

三、数据
通常，为了在层之间传递，数据需要被设计成通用的格式，或者是上下两层可以通用的格式，只在本层内部使用的数据，才可以是专用的格式。
使用统一的数据格式，但是有时反而会增加转换的成本， 这需要根据具体的业务逻辑，做合理的匹配。

四、简化调用
在具体开发中，经常会出现不同对象之间的互相调用关系，而具体的对象，可能存在不同的位置，为了方便这种调用，使用全局数据来简化。
通常，在c++中，可以使用类的静态方法来实现invoking功能。
在skeletal层内可以直接调用，在view层内使用，可以简化调用。
在skeletal层的base里也可以使用，但是，不建议在view层，serve层，store层这三层的base内调用。

五、结构
针对以上的几点规则，V4.0架构的大致的结构如下：
main	//程序入口
|
|	  	    +<----------------------------Invoking(全局)
|		     |	          		    |	
|		     |	          		    |		
+---------------------->+	          	+-------->View------------------>ViewBase
		     |	          	 |
		Skeletal----SkeletalBase------->Serve----------------->ServeBase
			   	 |
			  	+-------->Store------------------>StoreBase


本版本的框架，适合于大型软件的开发，不适合中小型的软件使用。由于分层多，结构复杂，导致项目膨胀很快，要实现具体一个业务需求，需要增加的文件很多，工作繁重。

应用在进程级，由于使用了全局数据，本框架不适用于在同一个进程内有多个实例的应用，只能用于一个进程一个实例的应用。
否则，多个实例需要增加实例选择机制。







